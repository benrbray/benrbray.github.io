---
interface Props {
  uniqueId: string,
  tx: string,
  ty: string,
  theta: string,
  width: string,
  fill: string,
  colorHalo1: string,
  colorHalo2: string
}

const props = Astro.props;

const uniqueIdPath = `${props.uniqueId}-path`;
const uniqueIdClip = `${props.uniqueId}-clip`;
const uniqueIdFilter = `${props.uniqueId}-filter`;
---

<div
  class="shape"
  style={{
    "--tx"          : `${props.tx}`,
    "--ty"          : `${props.ty}`,
    "--theta"       : `${props.theta}`,
    "--shape-width" : `${props.width}`
  }}
>
  <div class="frosted" style={{ "clip-path": `url(#${uniqueIdClip})` }} />
  <svg class="shape-svg" viewBox="0 0 1 1" preserveAspectRatio="xMinYMin" aria-hidden="true">
    <defs>
      <filter id={`${uniqueIdFilter}`}>
        <!-- SourceAlpha is black with the same opacity as the target shape. -->
        <!-- For a solid shape, the alpha channel will be opaque black.      -->
        <!-- Blurring the alpha channel softens the edges of the input shape.-->
        <feGaussianBlur in="SourceAlpha" stdDeviation=".23" result="alphaBlur"></feGaussianBlur>
        
        <!-- The next filter creates a black "inner shadow" by subtracting   -->
        <!-- the blurred alpha channel from the original.  Each channel of   -->
        <!-- the composite is computed by the following equation:            -->
        <!--     result = k1*i1*i2 + k2*i1 + k3*i2 + k4                      -->
        <!--            = i2 - i1  (for k1=0,k2=-1,k3=1)                     -->
        <!-- Observe that:                                                   -->
        <!--     Since RGB=0 for both inputs, only the alpha is nonzero.     -->
        <!--     Since (result < i2), the result is masked by the alpha      -->
        <!--       of the original.  Transparent regions remain transprent.  -->
        <feComposite in="alphaBlur" in2="SourceAlpha" operator="arithmetic" k1="0" k2="-1" k3="1" result="shadowDiff"></feComposite>
        
        <!-- Create a colored halo by creating a solid colored rectangle and -->
        <!--   using the shadowDiff as its alpha channel, with the "in"      -->
        <!--   compositing operation. -->
        <!-- <feFlood flood-color="#68C6CC" result="colorRect" /> -->
        <feFlood flood-color={props.colorHalo1} result="colorRect" />
        <feComposite in="colorRect" in2="shadowDiff" operator="in" result="colorHalo"></feComposite>
        
        <!-- Place the colored halo on top of the original input image.      -->
        <feComposite in="colorHalo" in2="SourceGraphic" operator="over" result="firstShadow"></feComposite>

        <!-- Now we have the original image, with a colored halo emanating   -->
        <!-- from the edges.  The remaining steps repeat the same technique  -->
        <!-- to add a second colored halo with a different offset.           -->
        <feGaussianBlur in="firstShadow" stdDeviation=".15"></feGaussianBlur>
        <feOffset dy="-0.07" dx="-0.12" result="firstShadowBlurOffset" />
        <feComposite in="firstShadowBlurOffset" in2="firstShadow" operator="arithmetic" k2="-1" k3="1" result="shadowDiff2"></feComposite>
        <feFlood flood-color={props.colorHalo2}></feFlood>
        <feComposite in2="shadowDiff2" operator="in"></feComposite>
        <feComposite in2="firstShadow" operator="over"></feComposite>
      </filter>
      <slot />
    </defs>
    <clipPath id={uniqueIdClip} clipPathUnits="objectBoundingBox">
      <use href={`#${uniqueIdPath}`} />
    </clipPath>
    <g>
      <use
        href={`#${uniqueIdPath}`}
        fill={props.fill}
        filter={`url(#${uniqueIdFilter})`}
      />
    </g>
  </svg>
</div>

<style>
.shape {
  position: absolute;
  
  /* explicit width/height is used to keep the shape's
    center locked at the origin, for more intuitive */
  width: var(--shape-width);
  height: var(--shape-width);
  
  transform: translate(var(--tx), var(--ty)) rotate(var(--theta));
}

.shape-svg {
  position: absolute;
  width: var(--shape-width);
}

.frosted {
  position: absolute;
  width: var(--shape-width);
  height: var(--shape-width);

  clip-path: url(`${uniqueId}`);
  /* background: rgba(255, 27, 27, 0.25); */
  backdrop-filter: blur(4px);
}
</style>